import os
import re
import telebot
import logging
from pymongo import MongoClient
from pymongo.errors import ConnectionFailure, OperationFailure
from bson import ObjectId
from dotenv import load_dotenv
import time

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ‡πÇ‡∏´‡∏•‡∏î Environment Variables
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
MONGO_URI = os.getenv("MONGO_URI")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á Bot
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# ‡∏•‡∏ö Webhook ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ Polling
try:
    bot.remove_webhook()
    logger.info("Webhook removed successfully")
except Exception as e:
    logger.error(f"Failed to remove webhook: {e}")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
def connect_mongodb():
    for attempt in range(3):  # ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        try:
            client = MongoClient(MONGO_URI, serverSelectionTimeoutMS=5000)
            client.admin.command('ping')  # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            logger.info("Connected to MongoDB successfully")
            db = client["stock-management"]
            collections = db.list_collection_names()
            logger.info(f"Collections in database: {collections}")
            return db
        except ConnectionFailure as e:
            logger.error(f"MongoDB connection failed (attempt {attempt + 1}/3): {e}")
            time.sleep(2)  # ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
        except OperationFailure as e:
            logger.error(f"MongoDB operation failed: {e}")
            return None
        except Exception as e:
            logger.error(f"Unexpected error during MongoDB connection: {e}")
            return None
    return None

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
db = connect_mongodb()
if db is None:
    logger.error("Failed to connect to MongoDB after retries")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /start ‡πÅ‡∏•‡∏∞ /help
@bot.message_handler(commands=['start', 'help'])
def handle_start_help(message):
    help_text = (
        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏≤‡∏ö\n"
        "‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å\n"
        "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 1015KH"
    )
    bot.reply_to(message, help_text)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)
@bot.message_handler(content_types=['text'])
def handle_message(message):
    try:
        if db is None:
            bot.reply_to(message, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á")
            logger.warning("No MongoDB connection available")
            return

        product_code = message.text.strip()
        logger.info(f"Received product code: {product_code}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (XXXXKH)
        if not re.match(r'^\d{4}KH$', product_code, re.IGNORECASE):
            bot.reply_to(message, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 1015KH)")
            return
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏£‡∏´‡∏±‡∏™
        products_collection = db["products"]
        product = products_collection.find_one({"productCode": product_code})
        if not product:
            logger.warning(f"No product found for code: {product_code}")
            product_count = products_collection.count_documents({})
            logger.info(f"Total products in collection: {product_count}")
            sample_products = list(products_collection.find().limit(5))
            logger.info(f"Sample products: {[p['productCode'] for p in sample_products]}")
            bot.reply_to(message, f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ {product_code}")
            return

        product_id = ObjectId(product["_id"])
        product_name = product["name"]
        logger.info(f"Found product: {product_code} - {product_name} (ID: {product_id})")

        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Lot ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏° qtyOnHand ‡∏ï‡∏≤‡∏° Warehouse
        lots_collection = db["lots"]
        pipeline = [
            {"$match": {"productId": product_id, "status": "active"}},
            {
                "$group": {
                    "_id": "$warehouse",
                    "total_qty": {"$sum": "$qtyOnHand"}
                }
            },
            {
                "$lookup": {
                    "from": "warehouses",
                    "localField": "_id",
                    "foreignField": "_id",
                    "as": "warehouse_info"
                }
            },
            {"$unwind": "$warehouse_info"},
            {"$match": {"total_qty": {"$gt": 0}}},
            {
                "$project": {
                    "warehouse_name": "$warehouse_info.name",
                    "total_qty": 1,
                    "_id": 0
                }
            }
        ]

        results = list(lots_collection.aggregate(pipeline))
        logger.info(f"Aggregation results for product {product_code}: {results}")

        if not results:
            logger.warning(f"No stock found for product: {product_code}")
            bot.reply_to(message, f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {product_code}")
            return

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        response = f"üì¶ Summary for {product_code} ‚Äî {product_name}\n"
        for result in results:
            response += f"üè≠ {result['warehouse_name']}\n   üëâ {product_name} : {result['total_qty']} pcs\n"

        bot.reply_to(message, response)
        logger.info(f"Sent response for {product_code}")

    except Exception as e:
        logger.error(f"Error processing message: {e}")
        bot.reply_to(message, "·ûî·üí·ûö·ûñ·üê·ûì·üí·ûí·ûÄ·üÜ·ûñ·ûª·ûÑ·ûá·ûΩ·ûî·ûî·üí·ûö·ûë·üá·ûî·ûâ·üí·û†·û∂ ·ûü·ûº·ûò·ûñ·üí·ûô·û∂·ûô·û∂·ûò·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî")

# ‡πÄ‡∏£‡∏¥‡πà‡∏° Bot
if __name__ == "__main__":
    logger.info("Starting bot polling")
    bot.polling(none_stop=True)